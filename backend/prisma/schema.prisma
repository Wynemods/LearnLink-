// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  INSTRUCTOR
}

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  username          String       @unique
  firstName         String
  lastName          String
  password          String
  role              Role         @default(STUDENT)
  isActive          Boolean      @default(true)
  isVerified        Boolean      @default(false)
  profilePicture    String?
  bio               String?
  title             String?
  specialty         String?
  experience        String?
  expertise         String?
  rating            Float?       @default(0)
  totalStudents     Int?         @default(0)
  
  // Auth related fields
  resetToken        String?
  resetTokenExpiry  DateTime?
  verificationToken String?
  lastLogin         DateTime?
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  enrollments       Enrollment[]  @relation("StudentEnrollments")
  coursesCreated    Course[]     @relation("CourseInstructor")
  assignments       Assignment[]
  submissions       Submission[]
  reviews           Review[]
  payments          Payment[]
  
  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  color       String?
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Course {
  id               String   @id @default(cuid())
  title            String
  description      String?
  thumbnail        String?
  heroImage        String?
  price            Float
  originalPrice    Float?
  discount         Int?
  duration         String?
  level            String?  // beginner, intermediate, advanced
  modules          Int?
  rating           Float?   @default(0)
  totalReviews     Int?     @default(0)
  features         String[]
  learningOutcomes String[]
  requirements     String[]
  isPublished      Boolean  @default(false)
  categoryId       String?
  category         Category? @relation(fields: [categoryId], references: [id])
  instructorId     String
  instructor       User     @relation("CourseInstructor", fields: [instructorId], references: [id])
  lessons          Lesson[]
  enrollments      Enrollment[]
  reviews          Review[]
  payments         Payment[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("courses")
}

model Enrollment {
  id               String   @id @default(cuid())
  studentId        String
  student          User     @relation("StudentEnrollments", fields: [studentId], references: [id])
  courseId         String
  course           Course   @relation(fields: [courseId], references: [id])
  progress         Int      @default(0)
  currentLesson    Int      @default(1)
  completedLessons String[]
  enrolledAt       DateTime @default(now())
  lastAccessedAt   DateTime @default(now())

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String
  videoUrl    String?
  duration    String?
  order       Int
  isPublished Boolean  @default(false)
  type        String   @default("video")
  isPreview   Boolean  @default(false)
  
  courseId    String
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lessons")
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  maxScore    Int      @default(100)
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  
  submissions Submission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("assignments")
}

model Submission {
  id           String   @id @default(cuid())
  content      String
  submittedAt  DateTime @default(now())
  score        Int?
  feedback     String?
  
  studentId    String
  student      User     @relation(fields: [studentId], references: [id])
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([studentId, assignmentId])
  @@map("submissions")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  rating    Int      // Remove the @constraint since it's not supported
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("reviews")
}

model Payment {
  id                   String    @id @default(cuid())
  checkoutRequestId    String?   @unique
  merchantRequestId    String?
  phoneNumber          String
  amount               Float
  accountReference     String?
  status               String    @default("PENDING") // PENDING, COMPLETED, FAILED, CANCELLED
  mpesaReceiptNumber   String?
  transactionDate      DateTime?
  resultCode           String?   // Add this field
  resultDescription    String?   // Add this field too for better error handling
  courseId             String?
  course               Course?   @relation(fields: [courseId], references: [id])
  userId               String?
  user                 User?     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("payments")
}

