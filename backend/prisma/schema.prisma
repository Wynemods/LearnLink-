// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  INSTRUCTOR
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  username          String       @unique
  firstName         String
  lastName          String
  password          String
  role              Role         @default(STUDENT)
  isActive          Boolean      @default(true)
  isVerified        Boolean      @default(false)
  profilePicture    String?
  bio               String?
  title             String?
  specialty         String?
  experience        String?
  expertise         String?
  rating            Float?       @default(0)
  totalStudents     Int?         @default(0)
  
  // Auth related fields
  resetToken        String?
  resetTokenExpiry  DateTime?
  verificationToken String?
  lastLogin         DateTime?
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  enrollments       Enrollment[]   @relation("StudentEnrollments")
  coursesCreated    Course[]      @relation("CourseInstructor")
  assignments       Assignment[]
  submissions       Submission[]
  reviews           Review[]
  payments          Payment[]
  quizAttempts      QuizAttempt[] @relation("StudentQuizAttempts")
  
  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  color       String?
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Course {
  id               String   @id @default(cuid())
  title            String
  description      String?
  thumbnail        String?
  heroImage        String?
  price            Float
  originalPrice    Float?
  discount         Int?
  duration         String?
  level            String?  // beginner, intermediate, advanced
  modules          Int?
  rating           Float?   @default(0)
  totalReviews     Int?     @default(0)
  features         String[]
  learningOutcomes String[]
  requirements     String[]
  
  // Enhanced curriculum structure
  curriculum       Json?    // Store full curriculum as JSON with sections, lessons, and quizzes
  totalSections    Int?     @default(0)
  totalLectures    Int?     @default(0)
  totalQuizzes     Int?     @default(0)
  totalDuration    String?
  
  // Course content
  whatYouLearn     String[] // Learning outcomes
  courseContent    String[] // Detailed content breakdown
  courseRequirements String[] // Prerequisites
  targetAudience   String[] // Who this course is for
  
  // Instructor info
  instructorBio    String?
  instructorExperience String?
  instructorRating Float?   @default(0)
  
  isPublished      Boolean  @default(false)
  categoryId       String?
  category         Category? @relation(fields: [categoryId], references: [id])
  instructorId     String
  instructor       User     @relation("CourseInstructor", fields: [instructorId], references: [id])
  lessons          Lesson[]
  quizzes          Quiz[]
  enrollments      Enrollment[]
  reviews          Review[]
  payments         Payment[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("courses")
}

model Enrollment {
  id               String   @id @default(cuid())
  studentId        String
  student          User     @relation("StudentEnrollments", fields: [studentId], references: [id])
  courseId         String
  course           Course   @relation(fields: [courseId], references: [id])
  progress         Int      @default(0)
  currentLesson    Int      @default(1)
  completedLessons String[]
  enrolledAt       DateTime @default(now())
  lastAccessedAt   DateTime @default(now())

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String
  videoUrl    String?
  duration    String?
  order       Int
  isPublished Boolean  @default(false)
  type        String   @default("video")
  isPreview   Boolean  @default(false)
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lessons")
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  maxScore    Int      @default(100)
  
  courseId    String
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id])
  
  submissions Submission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("assignments")
}

model Submission {
  id           String   @id @default(cuid())
  content      String
  score        Int?
  feedback     String?
  submittedAt  DateTime @default(now())
  gradedAt     DateTime?
  
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      User     @relation(fields: [studentId], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("submissions")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, userId])
  @@map("reviews")
}

model Payment {
  id                    String        @id @default(cuid())
  amount                Float
  phoneNumber           String
  merchantRequestId     String
  checkoutRequestId     String        @unique
  status                PaymentStatus @default(PENDING)
  mpesaReceiptNumber    String?
  transactionDate       DateTime?
  resultDescription     String?
  
  // Relations
  courseId             String
  course               Course        @relation(fields: [courseId], references: [id])
  userId               String
  user                 User          @relation(fields: [userId], references: [id])
  
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@map("payments")
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration    Int?     // in minutes
  order       Int
  isPublished Boolean  @default(false)
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Store questions with correct answers - only instructor can see correct answers
  questions   Json     // Store questions as JSON with correct answers
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("quizzes")
}

model QuizAttempt {
  id          String   @id @default(cuid())
  studentId   String
  student     User     @relation("StudentQuizAttempts", fields: [studentId], references: [id])
  quizId      String
  courseId    String
  
  answers     Json     // Store student's answers
  score       Float    @default(0)
  maxScore    Float    @default(0)
  percentage  Float    @default(0)
  timeSpent   Int?     // in seconds
  isCompleted Boolean  @default(false)
  
  startedAt   DateTime @default(now())
  completedAt DateTime?
  
  @@unique([studentId, quizId])
  @@map("quiz_attempts")
}

